generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL")
  directUrl         = env("POSTGRES_URL_NON_POOLING")
  shadowDatabaseUrl = env("SHADOW_DB_URL")
}

model User {
  id                        Int                     @id @default(autoincrement())
  full_name                 String
  email                     String                  @unique
  phone                     String?
  password                  String
  profession                String?
  created_at                DateTime                @default(now())
  updated_at                DateTime                @updatedAt
  role                      UserRole                @default(user)
  daily_target_minutes      Int                     @default(60)
  age_range                 String?
  learning_preferences      String[]
  family_value_orientation  FamilyValueOrientation?
  wants_religious_content   Boolean?
  personalization_completed Boolean                 @default(false)
  personalization_result    String?                 // Judul materi hasil personalisasi AI
  children                  Child[]
  consultations             Consultation[]
  material_progress         MaterialProgress[]
  webinar_registrations     WebinarRegistration[]
  dailyprogress             DailyProgress[]
}

model Child {
  id                Int                @id @default(autoincrement())
  user_id           Int
  full_name         String
  gender            Gender
  birth_date        DateTime
  age               Int?
  education_level   String?
  has_special_needs Boolean?           @default(false)
  user              User               @relation(fields: [user_id], references: [id], onDelete: Cascade)
  material_progress MaterialProgress[]
}

model Material {
  id                         Int                @id @default(autoincrement())
  title                      String
  description                String?
  recommended_age_range      String?
  estimated_duration_minutes Int?
  created_at                 DateTime           @default(now())
  image_url                  String?
  content                    String?
  category                   String?
  material_progress          MaterialProgress[]
  quizzes                    Quiz[]
}

model MaterialProgress {
  id            Int            @id @default(autoincrement())
  user_id       Int
  child_id      Int
  material_id   Int
  status        MaterialStatus @default(not_started)
  completed_at  DateTime?
  last_accessed DateTime?
  child         Child          @relation(fields: [child_id], references: [id], onDelete: Cascade)
  material      Material       @relation(fields: [material_id], references: [id], onDelete: Cascade)
  user          User           @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, child_id, material_id])
}

model Quiz {
  id             Int      @id @default(autoincrement())
  material_id    Int
  question       String
  options        String[]
  correct_answer String
  material       Material @relation(fields: [material_id], references: [id], onDelete: Cascade)
}

model Tip {
  id         Int      @id @default(autoincrement())
  title      String?
  content    String?
  category   String?   
  image_url  String?   
  created_at DateTime @default(now())
}

model Webinar {
  id            Int                   @id @default(autoincrement())
  title         String
  speaker       String?
  date          DateTime
  description   String?
  created_at    DateTime              @default(now())
  lokasi        String?
  job_speaker   String?
  registrations WebinarRegistration[]
}

model WebinarRegistration {
  id            Int      @id @default(autoincrement())
  user_id       Int
  webinar_id    Int
  registered_at DateTime @default(now())
  user          User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  webinar       Webinar  @relation(fields: [webinar_id], references: [id], onDelete: Cascade)
}

model Doctor {
  id            Int            @id @default(autoincrement())
  full_name     String
  profession    Profession
  is_active     Boolean
  consultations Consultation[]
}

model Consultation {
  id         Int                @id @default(autoincrement())
  user_id    Int
  doctor_id  Int
  message    String
  created_at DateTime           @default(now())
  status     ConsultationStatus @default(pending)
  doctor     Doctor             @relation(fields: [doctor_id], references: [id], onDelete: Cascade)
  user       User               @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model DailyProgress {
  id               Int      @id @default(autoincrement())
  user_id          Int
  date             DateTime @db.Date
  learning_minutes Int      @default(0)
  User             User     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user")

  @@unique([user_id, date], map: "user_daily_progress_unique")
  @@map("dailyprogress")
}

model Faq {
  id        Int      @id @default(autoincrement())
  question  String
  answer    String
  category  String
  createdAt DateTime @default(now()) @map("created_at")

  @@map("faqs")
}

enum Gender {
  male
  female
}

enum FamilyValueOrientation {
  konservatif
  moderat
  terbuka
}

enum Profession {
  psikolog
  dokter_spesialis
  konselor
}

enum ConsultationStatus {
  pending
  in_progress
  resolved
}

enum MaterialStatus {
  not_started
  in_progress
  completed
}

enum UserRole {
  admin
  user
}
